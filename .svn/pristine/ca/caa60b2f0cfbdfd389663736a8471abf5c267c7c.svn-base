
//验证类
var VerifictionClass = {
    isPhoneInternal: false,

   //验证手机号码合法性
    iphonever: function(str) {
        if (str == "") {
            return false;
        } else if (! (/^1[3|4|5|8][0-9]\d{8}$/.test(str))) {
            return false;
        } else {
            return true
        }
    },

    //验证当前访问网站的是否属于手机
    isMobile: function() {
        var regex_match = /(nokia|iphone|android|motorola|^mot-|softbank|foma|docomo|kddi|up.browser|up.link|htc|dopod|blazer|netfront|helio|hosin|huawei|novarra|CoolPad|webos|techfaith|palmsource|blackberry|alcatel|amoi|ktouch|nexian|samsung|^sam-|s[cg]h|^lge|ericsson|philips|sagem|wellcom|bunjalloo|maui|symbian|smartphone|midp|wap|phone|windows ce|iemobile|^spice|^bird|^zte-|longcos|pantech|gionee|^sie-|portalmmm|jigs browser|hiptop|^benq|haier|^lct|operas*mobi|opera*mini|320x320|240x320|176x220)/i;
        var u = navigator.userAgent;
        if (null == u) {return true;}
        var result = regex_match.exec(u);
        if (null == result) {  return false
        }else{return true}
    },

    //验证纯数字
    isInt: function(str){
        var reg =  /^(-|\+)?\d+$/ ;
        return reg.test(str);
    },

    //验证小数
    isFloat: function(str) {
        if (! (/^\d+(.\d{1,2}){0,1}$/.test(str))) {
            return false;
        } else {
            return true;
        }
    },

    //图片链接处理
    imgLink: function (url){
        var urlData;
        var standbyUrl = "";
        if(url === null){urlData = publicParameterObj.parameters.proImgUrl + publicParameterObj.parameters.defaultuImg;
        }else{
            if(url.substring(0,4) === "http"){
                urlData = url;
            }else{
                urlData = publicParameterObj.parameters.proImgUrl + url;
            }
        }
        return urlData;
    },
    //验证是否字母和数字组成
    isLetterAndNum: function(str){
        var reg = /^(([a-z]+[0-9]+)|([0-9]+[a-z]+)|[a-z]|[0-9])[a-z0-9]*$/;
        return reg.test(str);
    },

    //消除空格
    textLengthTrim: function (str) {
        return str.replace(/\s/g, "");
    },

    //文字过长省略
    textLengthCut: function (str) {
        if (str.length > 10) {
            return str.substring(0, 10) + "...";
        }
        return str;
    },

    //网络被关闭
    onOffLineInternal: function() {
        $(".conPrompt").fadeIn();
        customControlObj.mControl.hideLoader();
        publicParameterObj.parameters.isLoding = true;
    },

    //网络被打开
    onOnLineInternal: function() {
        $(".conPrompt").fadeOut();
        publicParameterObj.parameters.isLoding = false;
    },

    //安卓返回键
    onBackKeyDown: function() {
        if(indexclass.isIndex === true){
            navigator.notification.confirm(
                '确定退出企业应用吗',
                function (buttonIndex) {
                    if (buttonIndex === 1) {
                        navigator.app.exitApp();
                    }else{
                        navigator.notification.cancel();
                    }
                },
                '退出企业应用',
                ['退出','返回']
            )
        }else {
            navigator.app.backHistory();
        }
    },

    //推送
    testSetJushTagNalias: function(){

        var param = {};
        var eurl = publicParameterObj.parameters.userUrlHead + publicParameterObj.parameters.userGetAliasNTags;
        var fun = function(data){
            var standbyUrl = "";
            if(data.status === "S"){
                try{
                    cordova.exec(phonedealwith.pluginAlert, phonedealwith.pluginAlert, "JpushClient", "setJpushAliasAndTags", [data.respData.alias,data.respData.tags]);
                }catch(err){}
            }else{
            }
        };
        getOrPostRequestObj.ajaxRquest.asynAjaxRequest("post",param,eurl,fun);
    },


    //*IOS7头部标题栏增加高度，以适应被状态栏挡住的字体
    ios7navInit: function(){
        try {
            if(this.isMobile()){
                if(window.device.platform === "iOS"){
                    if(window.device.version.substr(0,1) === "7" || window.device.version.substr(0,1) === "8"){
//                        var uiBar = $(".ui-bar-y");
//                        $(".ui-title").css("height","64px");
//                        $(".ui-title").css("line-height","55px");
//                        uiBar.css("height","64px");
//                        uiBar.css("line-height","120px");
//                        $(".navigationLeftBtn").css("top","16px");
//                        $(".navigationRightBtn").css("top","16px");
//                        $(".navigationMenuBtn").css("top","16px");
//                        $(".navigationImg").css("top","14px");
//                        $(".right-menu-list").css("top","62px");
//                        $("#wrapper").css("top","64px");
                    }
                }
            }
        }catch (error){}
    },

    //获取url后面的参数值
    getUrlParm: function( name )
    {
        var regexS = "[\\?&]"+name+"=([^&#]*)";
        var regex = new RegExp( regexS ) ;
        var tmpURL = window.location.href;
        var results = regex.exec(tmpURL) ;
        if( results == null ){return "" ;
        }else{return results[1];}
    }
};

////加载中动画
//(function(){
//    var emptyFn = function(){};
//    function Sonic(d) {
//        this.data = d.path || d.data;
//        this.imageData = [];
//        this.multiplier = d.multiplier || 1;
//        this.padding = d.padding || 0;
//        this.fps = d.fps || 25;
//        this.stepsPerFrame = ~~d.stepsPerFrame || 1;
//        this.trailLength = d.trailLength || 1;
//        this.pointDistance = d.pointDistance || .05;
//        this.domClass = d.domClass || 'sonic';
//        this.fillColor = d.fillColor || '#FFF';
//        this.strokeColor = d.strokeColor || '#FFF';
//        this.stepMethod = typeof d.step == 'string' ?
//            stepMethods[d.step] :
//            d.step || stepMethods.square;
//        this._setup = d.setup || emptyFn;
//        this._teardown = d.teardown || emptyFn;
//        this._preStep = d.preStep || emptyFn;
//        this.width = d.width ;
//        this.height = d.height ;
//        this.fullWidth = this.width + 2*this.padding;
//        this.fullHeight = this.height + 2*this.padding;
//        this.domClass = d.domClass || 'sonic';
//        this.setup();
//    }
//    var argTypes = Sonic.argTypes = {
//        DIM: 1,
//        DEGREE: 2,
//        RADIUS: 3,
//        OTHER: 0
//    };
//    var argSignatures = Sonic.argSignatures = {
//        arc: [1, 1, 3, 2, 2, 0],
//        bezier: [1, 1, 1, 1, 1, 1, 1, 1],
//        line: [1,1,1,1]
//    };
//    var pathMethods = Sonic.pathMethods = {
//        bezier: function(t, p0x, p0y, p1x, p1y, c0x, c0y, c1x, c1y) {
//
//            t = 1-t;
//            var i = 1-t,
//                x = t*t,
//                y = i*i,
//                a = x*t,
//                b = 3 * x * i,
//                c = 3 * t * y,
//                d = y * i;
//            return [
//                    a * p0x + b * c0x + c * c1x + d * p1x,
//                    a * p0y + b * c0y + c * c1y + d * p1y
//            ]
//        },
//        arc: function(t, cx, cy, radius, start, end) {
//            var point = (end - start) * t + start;
//            var ret = [
//                    (Math.cos(point) * radius) + cx,
//                    (Math.sin(point) * radius) + cy
//            ];
//            ret.angle = point;
//            ret.t = t;
//            return ret;
//        },
//        line: function(t, sx, sy, ex, ey) {
//            return [
//                    (ex - sx) * t + sx,
//                    (ey - sy) * t + sy
//            ]
//        }
//    };
//    var stepMethods = Sonic.stepMethods = {
//
//        square: function(point) {
//            this._.fillRect(point.x - 3, point.y - 3, 6, 6);
//        }
//    };
//    Sonic.prototype = {
//        setup: function() {
//            var args,
//                type,
//                method,
//                value,
//                data = this.data;
//            this.canvas = document.createElement('canvas');
//            this._ = this.canvas.getContext('2d');
//            this.canvas.className = this.domClass;
//            this.canvas.height = this.fullHeight;
//            this.canvas.width = this.fullWidth;
//            this.points = [];
//            for (var i = -1, l = data.length; ++i < l;) {
//                args = data[i].slice(1);
//                method = data[i][0];
//                if (method in argSignatures) for (var a = -1, al = args.length; ++a < al;) {
//                    type = argSignatures[method][a];
//                    value = args[a];
//                    switch (type) {
//                        case argTypes.RADIUS:
//                            value *= this.multiplier;
//                            break;
//                        case argTypes.DIM:
//                            value *= this.multiplier;
//                            value += this.padding;
//                            break;
//                        case argTypes.DEGREE:
//                            value *= Math.PI/180;
//                            break;
//                    }
//                    args[a] = value;
//                }
//                args.unshift(0);
//                for (var r, pd = this.pointDistance, t = pd; t <= 1; t += pd) {
//
//                    // Avoid crap like 0.15000000000000002
//                    t = Math.round(t/pd) / (1/pd);
//                    args[0] = t;
//                    r = pathMethods[method].apply(null, args);
//                    this.points.push({
//                        x: r[0],
//                        y: r[1],
//                        progress: t
//                    });
//                }
//            }
//            this.frame = 0;
//            //this.prep(this.frame);
//        },
//        prep: function(frame) {
//            if (frame in this.imageData) {
//                return;
//            }
//            this._.clearRect(0, 0, this.fullWidth, this.fullHeight);
//
//            var points = this.points,
//                pointsLength = points.length,
////				pd = this.pointDistance,
//                point,
//                index,
//                frameD,
//                indexD;
//            this._setup();
//            for (var i = -1, l = pointsLength*this.trailLength; ++i < l && !this.stopped;) {
//                index = frame + i;
//                point = points[index] || points[index - pointsLength];
//                if (!point) continue;
//                this.alpha = Math.round(1000*(i/(l-1)))/1000;
//                this._.globalAlpha = this.alpha;
//                this._.fillStyle = this.fillColor;
//                this._.strokeStyle = this.strokeColor;
//                frameD = frame/(this.points.length-1);
//                indexD = i/(l-1);
//                this._preStep(point, indexD, frameD);
//                this.stepMethod(point, indexD, frameD);
//            }
//            this._teardown();
//            this.imageData[frame] = (
//                this._.getImageData(0, 0, this.fullWidth, this.fullWidth)
//                );
//            return true;
//        },
//        draw: function() {
//
//            if (!this.prep(this.frame)) {
//                this._.clearRect(0, 0, this.fullWidth, this.fullWidth);
//                this._.putImageData(
//                    this.imageData[this.frame],
//                    0, 0
//                );
//            }
//            this.iterateFrame();
//        },
//        iterateFrame: function() {
//
//            this.frame += this.stepsPerFrame;
//            if (this.frame >= this.points.length) {
//                this.frame = 0;
//            }
//        },
//        play: function() {
//            this.stopped = false;
//            var hoc = this;
//            this.timer = setInterval(function(){
//                hoc.draw();
//            }, 1000 / this.fps);
//        },
//        stop: function() {
//            this.stopped = true;
//            this.timer && clearInterval(this.timer);
//        }
//    };
//    window.Sonic = Sonic;
//}());

////动画特效数组
//$(function(){
//    var loaders = [
//        {
//            width: 100,
//            height: 100,
//            stepsPerFrame: 1,
//            trailLength: 1,
//            pointDistance: .02,
//            fps: 100,
//            fillColor: '#000000',
//            step: function(point, index) {
//                this._.beginPath();
//                this._.moveTo(point.x, point.y);
//                this._.arc(point.x, point.y, index * 4, 0, Math.PI*2, false);
//                this._.closePath();
//                this._.fill();
//            },
//            path: [
//                ['arc', 50, 50, 15, 0,360]
//            ]
//        }
//    ];
//
//    //动画播放
//    var d, a, container = document.getElementById('in');
//    for (var i = -1, l = loaders.length; ++i < l;) {
//        d = document.createElement('div');
//        d.className = 'l';
//        a = new Sonic(loaders[i]);
//        d.appendChild(a.canvas);
//        container.appendChild(d);
//        a.canvas.style.marginTop = (100 - a.fullHeight) / 2 + 'px';
//        a.canvas.style.marginLeft = (100 - a.fullWidth) / 2 + 'px';
//        a.play();
//    }
//});

var privateVerifiction = {
    verifiction: Object.create(VerifictionClass)
};

var privateVerifictionObj = Object.create(privateVerifiction);

